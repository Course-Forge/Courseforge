{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\OneDrive\\\\Documents\\\\GitHub\\\\Courseforge\\\\courseforge-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport Sidebar from './components/Sidebar';\nimport MainContent from './components/MainContent';\nimport Chat from './components/Chat';\n//import Hash\n// import { createCourse } from './services/api'; // Import the createCourse function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n\n  // // Function to send message to the backend and receive response\n  const sendMessage = async message => {\n    if (message.trim() !== '') {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: message\n      }]);\n      // Extract title and description from message (replace with your logic)\n      const [title, description] = message.split(',');\n      if (!title || !description) {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'gemini',\n          text: 'Please provide both the course title and description separated by a comma.'\n        }]);\n        return;\n      }\n\n      // Send message to the backend and get response\n      try {\n        const courseData = await createCourse({\n          title: title.trim(),\n          description: description.trim()\n        });\n        handleResponse(courseData); // Handle the response from the backend\n      } catch (error) {\n        console.error('Error sending message:', error);\n        // Handle error if necessary (e.g., display error message to user)\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'gemini',\n          text: 'Failed to send message. Please try again.'\n        }]);\n      }\n    }\n  };\n\n  // // Function to handle response from the backend (modify based on response structure)\n  // const handleResponse = (courseData) => {\n  //   // Assuming courseData contains the enhanced description returned from the backend\n  //   const response = `I have enhanced the description: ${courseData.enhanced_description}. Do you accept this? (yes/no)`;\n  //   setMessages((prevMessages) => [...prevMessages, { sender: 'gemini', text: response }]);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(MainContent, {\n        messages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        sendMessage: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Sidebar","MainContent","Chat","jsxDEV","_jsxDEV","App","_s","messages","setMessages","useState","sendMessage","message","trim","prevMessages","sender","text","title","description","split","courseData","createCourse","handleResponse","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sahil/OneDrive/Documents/GitHub/Courseforge/courseforge-frontend/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar';\r\nimport MainContent from './components/MainContent';\r\nimport Chat from './components/Chat';\r\n//import Hash\r\n// import { createCourse } from './services/api'; // Import the createCourse function\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // // Function to send message to the backend and receive response\r\n   const sendMessage = async (message) => {\r\n     if (message.trim() !== '') {\r\n       setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: message }]);\r\n       // Extract title and description from message (replace with your logic)\r\n       const [title, description] = message.split(',');\r\n\r\n       if (!title || !description) {\r\n         setMessages((prevMessages) => [\r\n           ...prevMessages,\r\n           { sender: 'gemini', text: 'Please provide both the course title and description separated by a comma.' },\r\n         ]);\r\n         return;\r\n       }\r\n\r\n       // Send message to the backend and get response\r\n       try {\r\n         const courseData = await createCourse({ title: title.trim(), description: description.trim() });\r\n         handleResponse(courseData); // Handle the response from the backend\r\n       } catch (error) {\r\n         console.error('Error sending message:', error);\r\n         // Handle error if necessary (e.g., display error message to user)\r\n         setMessages((prevMessages) => [\r\n           ...prevMessages,\r\n           { sender: 'gemini', text: 'Failed to send message. Please try again.' },\r\n         ]);\r\n       }\r\n     }\r\n   };\r\n\r\n  // // Function to handle response from the backend (modify based on response structure)\r\n  // const handleResponse = (courseData) => {\r\n  //   // Assuming courseData contains the enhanced description returned from the backend\r\n  //   const response = `I have enhanced the description: ${courseData.enhanced_description}. Do you accept this? (yes/no)`;\r\n  //   setMessages((prevMessages) => [...prevMessages, { sender: 'gemini', text: response }]);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar />\r\n      <div className=\"content\">\r\n        <MainContent messages />\r\n        <Chat sendMessage />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,IAAI,MAAM,mBAAmB;AACpC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACC,MAAMC,WAAW,GAAG,MAAOC,OAAO,IAAK;IACrC,IAAIA,OAAO,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzBJ,WAAW,CAAEK,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;QAAEC,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAEJ;MAAQ,CAAC,CAAC,CAAC;MACnF;MACA,MAAM,CAACK,KAAK,EAAEC,WAAW,CAAC,GAAGN,OAAO,CAACO,KAAK,CAAC,GAAG,CAAC;MAE/C,IAAI,CAACF,KAAK,IAAI,CAACC,WAAW,EAAE;QAC1BT,WAAW,CAAEK,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;UAAEC,MAAM,EAAE,QAAQ;UAAEC,IAAI,EAAE;QAA6E,CAAC,CACzG,CAAC;QACF;MACF;;MAEA;MACA,IAAI;QACF,MAAMI,UAAU,GAAG,MAAMC,YAAY,CAAC;UAAEJ,KAAK,EAAEA,KAAK,CAACJ,IAAI,CAAC,CAAC;UAAEK,WAAW,EAAEA,WAAW,CAACL,IAAI,CAAC;QAAE,CAAC,CAAC;QAC/FS,cAAc,CAACF,UAAU,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C;QACAd,WAAW,CAAEK,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;UAAEC,MAAM,EAAE,QAAQ;UAAEC,IAAI,EAAE;QAA4C,CAAC,CACxE,CAAC;MACJ;IACF;EACF,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEX,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrB,OAAA,CAACJ,OAAO;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACXzB,OAAA;MAAKoB,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBrB,OAAA,CAACH,WAAW;QAACM,QAAQ;MAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxBzB,OAAA,CAACF,IAAI;QAACQ,WAAW;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvB,EAAA,CAjDID,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAmDT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}