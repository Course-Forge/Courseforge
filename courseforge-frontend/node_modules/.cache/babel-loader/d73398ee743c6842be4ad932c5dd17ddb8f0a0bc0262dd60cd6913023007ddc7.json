{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\OneDrive\\\\Documents\\\\GitHub\\\\Courseforge\\\\courseforge-frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const hasInitialized = useRef(false);\n  useEffect(() => {\n    if (!hasInitialized.current) {\n      addMessage('Hello! How can I assist you today?', 'gemini');\n      hasInitialized.current = true;\n    }\n  }, []);\n  const addMessage = (text, author) => {\n    const newMessage = {\n      text,\n      author\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n  };\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter' && inputValue.trim() !== '') {\n      const userMessage = inputValue.trim();\n      addMessage(userMessage, 'User');\n      setInputValue('');\n      setIsTyping(true);\n\n      // Send message to backend\n      axios.post('/api/courseforge/', {\n        message: userMessage\n      }).then(response => {\n        setIsTyping(false);\n        const {\n          gemini_message\n        } = response.data;\n        addMessage(gemini_message.text, 'gemini');\n      }).catch(error => {\n        setIsTyping(false);\n        addMessage('Error communicating with the server.', 'gemini');\n        console.error(error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.author === 'gemini' ? 'chat-right' : 'chat-left'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-message chat-right typing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your message here...\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onKeyPress: handleKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"disclaimer\",\n      children: \"CourseForge can make mistakes. Check important info.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"dBEVMo6IT3v/mp+JZ3YjFXAoC+c=\");\n_c = Chat;\nexport default Chat;\n// import React, { useState, useEffect, useRef, useCallback } from 'react';\n// import './Chat.css';\n// import { createCourse } from '../services/api'; // Import the createCourse function\n\n// const Footer = ({ sendMessage }) => { // Added sendMessage as a prop\n//   const [messages, setMessages] = useState([]);\n//   const [inputValue, setInputValue] = useState('');\n//   const [isTyping, setIsTyping] = useState(false);\n//   const hasInitialized = useRef(false);\n//   const [currentCourse, setCurrentCourse] = useState(null);\n\n//   useEffect(() => {\n//     if (!hasInitialized.current) {\n//       addMessage('Hello! Please provide the course title and description separated by a comma.');\n//       hasInitialized.current = true;\n//     }\n//   }, []);\n\n//   const addMessage = (text, author = 'Gemini') => {\n//     const newMessage = { text, author };\n//     setMessages((prevMessages) => [...prevMessages, newMessage]);\n//   };\n\n//   const handleInputChange = (event) => {\n//     setInputValue(event.target.value);\n//   };\n\n//   const handleKeyPress = (event) => {\n//     if (event.key === 'Enter' && inputValue.trim() !== '') {\n//       addMessage(inputValue, 'User');\n//       setInputValue('');\n//       setIsTyping(true); // Simulate Gemini response after a delay\n\n//       setTimeout(() => {\n//         simulateResponse(inputValue);\n//       }, 1000);\n//     }\n//   };\n\n//   const simulateResponse = async (userInput) => {\n//     const [title, description] = userInput.split(',');\n\n//     if (title && description) {\n//       try {\n//         // Call Django API to create course and get enhanced description\n//         const courseData = await createCourse({ title: title.trim(), description: description.trim() });\n//         setCurrentCourse(courseData);\n\n//         const response = `I have enhanced the description: ${courseData.enhanced_description}. Do you accept this? (yes/no)`;\n//         setIsTyping(false);\n//         addMessage(response, 'Gemini');\n//       } catch (error) {\n//         console.error('Error creating course:', error);\n//         addMessage('Failed to create course. Please try again.', 'Gemini');\n//         setIsTyping(false);\n//       }\n//     } else {\n//       const response = 'Please provide both the course title and description separated by a comma.';\n//       setIsTyping(false);\n//       addMessage(response, 'Gemini');\n//     }\n//   };\n\n//   const handleAcceptance = useCallback(async (userInput) => {\n//     if (userInput.toLowerCase() === 'yes' && currentCourse) {\n//       const response = 'The course has been created with the first day content!';\n//       setIsTyping(false);\n//       addMessage(response, 'Gemini');\n//       // Implement logic to potentially handle course creation confirmation or further actions based on your backend setup\n//     } else if (userInput.toLowerCase() === 'no') {\n//       const response = 'Please provide a new course title and description.';\n//       setIsTyping(false);\n//       addMessage(response, 'Gemini');\n//       setCurrentCourse(null); // Reset current course if user rejects\n//     }\n//   }, [currentCourse]);\n\n//   useEffect(() => {\n//     if (currentCourse) {\n//       handleAcceptance(inputValue);\n//     }\n//   }, [currentCourse, handleAcceptance, inputValue]);\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-messages\">\n//         {messages.map((message, index) => (\n//           <div key={index} className={`chat-message ${message.author === 'Gemini' ? 'chat-right' : 'chat-left'}`}>\n//             {message.text}\n//           </div>\n//         ))}\n//         {isTyping && (\n//           <div className=\"chat-message chat-right typing-indicator\">\n//             <div className=\"dot\"></div>\n//             <div className=\"dot\"></div>\n//             <div className=\"dot\"></div>\n//           </div>\n//         )}\n//       </div>\n//       <input type=\"text\" placeholder=\"Type your message here...\" value={inputValue} onChange={handleInputChange} onKeyPress={handleKeyPress} />\n//       <p className=\"disclaimer\">CourseForge can make mistakes. Check important info.</p>\n//     </div>\n//   );\n// };\n\n// export default Footer;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputValue","setInputValue","isTyping","setIsTyping","hasInitialized","current","addMessage","text","author","newMessage","prevMessages","handleInputChange","event","target","value","handleKeyPress","key","trim","userMessage","post","message","then","response","gemini_message","data","catch","error","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/sahil/OneDrive/Documents/GitHub/Courseforge/courseforge-frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './Chat.css';\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const hasInitialized = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitialized.current) {\r\n      addMessage('Hello! How can I assist you today?', 'gemini');\r\n      hasInitialized.current = true;\r\n    }\r\n  }, []);\r\n\r\n  const addMessage = (text, author) => {\r\n    const newMessage = { text, author };\r\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter' && inputValue.trim() !== '') {\r\n      const userMessage = inputValue.trim();\r\n      addMessage(userMessage, 'User');\r\n      setInputValue('');\r\n      setIsTyping(true);\r\n\r\n      // Send message to backend\r\n      axios.post('/api/courseforge/', { message: userMessage })\r\n        .then((response) => {\r\n          setIsTyping(false);\r\n          const { gemini_message } = response.data;\r\n          addMessage(gemini_message.text, 'gemini');\r\n        })\r\n        .catch((error) => {\r\n          setIsTyping(false);\r\n          addMessage('Error communicating with the server.', 'gemini');\r\n          console.error(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chat-message ${message.author === 'gemini' ? 'chat-right' : 'chat-left'}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {isTyping && (\r\n          <div className=\"chat-message chat-right typing-indicator\">\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type your message here...\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <p className=\"disclaimer\">CourseForge can make mistakes. Check important info.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n// import React, { useState, useEffect, useRef, useCallback } from 'react';\r\n// import './Chat.css';\r\n// import { createCourse } from '../services/api'; // Import the createCourse function\r\n\r\n// const Footer = ({ sendMessage }) => { // Added sendMessage as a prop\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [inputValue, setInputValue] = useState('');\r\n//   const [isTyping, setIsTyping] = useState(false);\r\n//   const hasInitialized = useRef(false);\r\n//   const [currentCourse, setCurrentCourse] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (!hasInitialized.current) {\r\n//       addMessage('Hello! Please provide the course title and description separated by a comma.');\r\n//       hasInitialized.current = true;\r\n//     }\r\n//   }, []);\r\n\r\n//   const addMessage = (text, author = 'Gemini') => {\r\n//     const newMessage = { text, author };\r\n//     setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setInputValue(event.target.value);\r\n//   };\r\n\r\n//   const handleKeyPress = (event) => {\r\n//     if (event.key === 'Enter' && inputValue.trim() !== '') {\r\n//       addMessage(inputValue, 'User');\r\n//       setInputValue('');\r\n//       setIsTyping(true); // Simulate Gemini response after a delay\r\n\r\n//       setTimeout(() => {\r\n//         simulateResponse(inputValue);\r\n//       }, 1000);\r\n//     }\r\n//   };\r\n\r\n//   const simulateResponse = async (userInput) => {\r\n//     const [title, description] = userInput.split(',');\r\n\r\n//     if (title && description) {\r\n//       try {\r\n//         // Call Django API to create course and get enhanced description\r\n//         const courseData = await createCourse({ title: title.trim(), description: description.trim() });\r\n//         setCurrentCourse(courseData);\r\n\r\n//         const response = `I have enhanced the description: ${courseData.enhanced_description}. Do you accept this? (yes/no)`;\r\n//         setIsTyping(false);\r\n//         addMessage(response, 'Gemini');\r\n//       } catch (error) {\r\n//         console.error('Error creating course:', error);\r\n//         addMessage('Failed to create course. Please try again.', 'Gemini');\r\n//         setIsTyping(false);\r\n//       }\r\n//     } else {\r\n//       const response = 'Please provide both the course title and description separated by a comma.';\r\n//       setIsTyping(false);\r\n//       addMessage(response, 'Gemini');\r\n//     }\r\n//   };\r\n\r\n//   const handleAcceptance = useCallback(async (userInput) => {\r\n//     if (userInput.toLowerCase() === 'yes' && currentCourse) {\r\n//       const response = 'The course has been created with the first day content!';\r\n//       setIsTyping(false);\r\n//       addMessage(response, 'Gemini');\r\n//       // Implement logic to potentially handle course creation confirmation or further actions based on your backend setup\r\n//     } else if (userInput.toLowerCase() === 'no') {\r\n//       const response = 'Please provide a new course title and description.';\r\n//       setIsTyping(false);\r\n//       addMessage(response, 'Gemini');\r\n//       setCurrentCourse(null); // Reset current course if user rejects\r\n//     }\r\n//   }, [currentCourse]);\r\n\r\n//   useEffect(() => {\r\n//     if (currentCourse) {\r\n//       handleAcceptance(inputValue);\r\n//     }\r\n//   }, [currentCourse, handleAcceptance, inputValue]);\r\n\r\n//   return (\r\n//     <div className=\"chat-container\">\r\n//       <div className=\"chat-messages\">\r\n//         {messages.map((message, index) => (\r\n//           <div key={index} className={`chat-message ${message.author === 'Gemini' ? 'chat-right' : 'chat-left'}`}>\r\n//             {message.text}\r\n//           </div>\r\n//         ))}\r\n//         {isTyping && (\r\n//           <div className=\"chat-message chat-right typing-indicator\">\r\n//             <div className=\"dot\"></div>\r\n//             <div className=\"dot\"></div>\r\n//             <div className=\"dot\"></div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//       <input type=\"text\" placeholder=\"Type your message here...\" value={inputValue} onChange={handleInputChange} onKeyPress={handleKeyPress} />\r\n//       <p className=\"disclaimer\">CourseForge can make mistakes. Check important info.</p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Footer;\r\n"],"mappings":"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AA2B;MACvCvB,KAAK,EAAEd,UAAW;MAClBsC,QAAQ,EAAE3B,iBAAkB;MAC5B4B,UAAU,EAAExB;IAAe;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACFxC,OAAA;MAAGiC,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAoD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/E,CAAC;AAEV,CAAC;AAACtC,EAAA,CAtEID,IAAI;AAAA4C,EAAA,GAAJ5C,IAAI;AAwEV,eAAeA,IAAI;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}