{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\OneDrive\\\\Documents\\\\GitHub\\\\Courseforge\\\\courseforge-frontend\\\\src\\\\components\\\\Dropdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Retrieve saved dropdowns from localStorage or initialize an empty array\n  const initialDropdowns = JSON.parse(localStorage.getItem('dropdowns')) || [];\n  const [dropdowns, setDropdowns] = useState(initialDropdowns);\n  const [activeIndex, setActiveIndex] = useState(null);\n\n  // Save dropdowns to localStorage whenever the dropdowns state changes\n  useEffect(() => {\n    localStorage.setItem('dropdowns', JSON.stringify(dropdowns));\n  }, [dropdowns]);\n\n  // Function to add a new dropdown (course)\n  const addDropdown = () => {\n    const newDropdown = {\n      title: `Course ${dropdowns.length + 1}`,\n      content: `This is the content for Course ${dropdowns.length + 1}.` // Simulate course content\n    };\n    setDropdowns(prevDropdowns => [...prevDropdowns, newDropdown]);\n  };\n\n  // Handle the accordion toggle\n  const toggleAccordion = index => {\n    setActiveIndex(activeIndex === index ? null : index);\n  };\n\n  // Load new dropdowns when scrolled to bottom\n  const handleScroll = () => {\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n      addDropdown();\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [dropdowns]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Courses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), dropdowns.map((dropdown, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accordion\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `accordion-header ${activeIndex === index ? 'active' : ''}`,\n        onClick: () => toggleAccordion(index),\n        children: dropdown.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `accordion-content ${activeIndex === index ? 'show' : ''}`,\n        children: dropdown.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HZCjpFcl8r6l5lWej1OrT82fIl4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","initialDropdowns","JSON","parse","localStorage","getItem","dropdowns","setDropdowns","activeIndex","setActiveIndex","setItem","stringify","addDropdown","newDropdown","title","length","content","prevDropdowns","toggleAccordion","index","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","dropdown","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sahil/OneDrive/Documents/GitHub/Courseforge/courseforge-frontend/src/components/Dropdown.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  // Retrieve saved dropdowns from localStorage or initialize an empty array\r\n  const initialDropdowns = JSON.parse(localStorage.getItem('dropdowns')) || [];\r\n  const [dropdowns, setDropdowns] = useState(initialDropdowns);\r\n  const [activeIndex, setActiveIndex] = useState(null);\r\n\r\n  // Save dropdowns to localStorage whenever the dropdowns state changes\r\n  useEffect(() => {\r\n    localStorage.setItem('dropdowns', JSON.stringify(dropdowns));\r\n  }, [dropdowns]);\r\n\r\n  // Function to add a new dropdown (course)\r\n  const addDropdown = () => {\r\n    const newDropdown = {\r\n      title: `Course ${dropdowns.length + 1}`,\r\n      content: `This is the content for Course ${dropdowns.length + 1}.`, // Simulate course content\r\n    };\r\n    setDropdowns((prevDropdowns) => [...prevDropdowns, newDropdown]);\r\n  };\r\n\r\n  // Handle the accordion toggle\r\n  const toggleAccordion = (index) => {\r\n    setActiveIndex(activeIndex === index ? null : index);\r\n  };\r\n\r\n  // Load new dropdowns when scrolled to bottom\r\n  const handleScroll = () => {\r\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\r\n      addDropdown();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [dropdowns]);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1>Courses</h1>\r\n      {dropdowns.map((dropdown, index) => (\r\n        <div className=\"accordion\" key={index}>\r\n          <div \r\n            className={`accordion-header ${activeIndex === index ? 'active' : ''}`} \r\n            onClick={() => toggleAccordion(index)}\r\n          >\r\n            {dropdown.title}\r\n          </div>\r\n          <div className={`accordion-content ${activeIndex === index ? 'show' : ''}`}>\r\n            {dropdown.content}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}