PROMPT:



==========

RESPONSE:

var gulp = require('gulp'); var browserSync = require('browser-sync').create(); var sass = require('gulp-sass'); var autoprefixer = require('gulp-autoprefixer'); var rename = require("gulp-rename"); var uglify = require('gulp-uglify'); var pump = require('pump'); var sourcemaps = require('gulp-sourcemaps'); // Static Server + watching scss/html files gulp.task('serve', ['sass'], function() { browserSync.init({ server: "./src" }); gulp.watch("src/scss/*.scss", ['sass']); gulp.watch("src/*.html").on('change', browserSync.reload); }); // Compile sass into CSS & auto-inject into browsers gulp.task('sass', function() { return gulp.src("src/scss/*.scss") .pipe(sourcemaps.init()) // Инициализируем sourcemap для отслеживания в последующей сборке файлов css и js соответственно исходным файлам less и js в режиме dev, а не minified-файлам. .pipe(sass()) // Скомпилируем Sass в CSS с помощью gulp-sass, указав, что компиляция должна происходить с cssnano, который мы указывали ранее, т.к. указывается postcss, то postcssPlugin(cssnano()) - это postcssPlugin(cssnano()) - это postcssPlugin(cssnano({ autoprefixer: false })) - это postcssPlugin(autoprefixer({ browsers: ['last 2 version'] })) - это postcssPlugin(cssnano({ autoprefixer: { add: true, remove: true, browsers: ['last 2 versions'] } })) - это cssnano({ autoprefixer: { add: true, remove: true, browsers: ['last 2 versions'] } }) - это autoprefixer({ browsers: ['last 2 version'] }) - это cssnano() - т.к. autoprefixer - true, browsers - last 2 version - default, cssnano() - default (autoprefixer({ browsers: ['last 2 version'] })), autoprefixer({ browsers: ['last 2 version'] }).postcssPlugin(cssnano()) - default (autoprefixer({ browsers: ['last 2 version'] })), postcssPlugin(autoprefixer({ browsers: ['last 2 version'] })).postcssPlugin(cssnano()) - default (autoprefixer({ browsers: ['last 2 version'] })), postcssPlugin(postcssPlugin(autoprefixer({ browsers: ['last 2 version'] })).postcssPlugin(cssnano())) - default (autoprefixer({ browsers: ['last 2 version'] })), postcssPlugin(postcssPlugin(postcssPlugin(autoprefixer({ browsers: ['last 2 version'] })).postcssPlugin(cssnano()))) - default (autoprefixer({ browsers: ['last 2 version'] })), postcssPlugin(postcssPlugin(postcssPlugin(postcssPlugin(autoprefixer({ browsers: ['last 2 version'] })).postcssPlugin(cssnano())))) - default (autoprefixer({ browsers: ['last 2 version'] }))).pipe(sourcemaps.write()) // Пропишем карту (map) к CSS-стилям. .pipe(sourcemaps.write('.')) // .map-файлы будут создаваться в css/maps/.pipe(sourcemaps.write()) // .map-файлы будут создаваться в css/.pipe(sourcemaps.write()) // .map-файлы будут создаваться... .pipe(sourcemaps.write('.')) // ...в css/.pipe(sourcemaps.write('.')) // ...в css/.pipe(sourcemaps.write('.')) // ...в css/.pipe(sourcemaps.write('.')) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe(sourcemaps.write()) // ...в css/.pipe((rename("style_minified_with_prefixes_and_suffixes_and_compressed_and_with_map_file_in_the_same_directory_where_the_input_file"))). pipe((rename("style"))). pipe((rename("style_minified"))). pipe((rename("style_minified_with_prefixes"))). pipe((rename("style_minified_with_prefixes"))). pipe((rename("style"))). pipe((rename("style_minified"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipe((rename("style"))). pipce((uglify().on('error', function (e) { console.log('\x07',e); return this;})))// .on('error', console)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on('error', notify)// .on ('errror') ) ) ) ) ) ) ) ) ) ) ).pipce ((uglify().pump())); pump([gulp], function (err){ if (err){ console.log ('\x07'); return this;} }); return pump([gulp], function (err){ if (err){ console.log ('\x07'); return this;} }); return pump([gulp], function (err){ if (err){ console.log ('\x07'); return this;} }); return pump([gulp], function (){}); return pump([gulp], function (){}); return pump([gulp], function (){}); return pump([gulp], function (){}); return pump([gulp], function (){}); return pump([gulp], function (){}); return pump([gulp], function (){}); return pump([gulp], function (){}); return pump([gulp], function ()